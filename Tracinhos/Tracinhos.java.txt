public class Tracinhos implements Cloneable
{
    private char texto [];

    public Tracinhos (int qtd) throws Exception
    {
        if (qtd < 0)
            throw new Exception ("quantidade invalidade");

        this.texto = new char[qtd];
        for (int i = 0; i<qtd; i++) {
            this.texto[i] = '_';
        }
    }

    public void revele (int posicao, char letra) throws Exception
    {
        if (posicao < 0 || posicao >= this.texto.length)
            throw new Exception ("posicao invalida");

        this.texto[posicao] = letra;
    }

    public boolean isAindaComTracinhos ()
    {
        for (int i = 0; i<this.texto.length; i++) {

            if (this.texto[i] == '_')
                return true;
        }
        return false;
    }

    public String toString ()
    {
        String str = "";
        for (int i = 0; i<this.texto.length; i++) {
            str = str + this.texto[i];
            str = str + ' ';
        }
        return str;
    }

    public boolean equals (Object obj)
    {
        if(this == obj) return true;
        if(obj == null) return false;
        if(this.getClass() != obj.getClass()) return false;
        if(this.texto != ((Tracinhos) obj).texto) return false;
        return true;
    }

    /*
    public int hashCode ()
    {
        // calcular e retornar o hashcode de this
    }
    */

    public Tracinhos (Tracinhos t) throws Exception // construtor de cÃ³pia
    {
        if (t == null)
            throw new Exception ("modelo ausente");

        this.texto = new char[t.texto.length];
        for (int i = 0; i<this.texto.length; i++) {
            this.texto[i] = t.texto[i];
        }
    }

    public Object clone ()
    {
        Tracinhos ret = null;
        try {
            ret = new Tracinhos (this);
        } catch (Exception erro){ }
        return ret;
    }

}
